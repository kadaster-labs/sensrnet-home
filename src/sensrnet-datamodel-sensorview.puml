@startuml "SensRNet-Datamodel-SensorView"

package LegalEntity <<Rectangle>> {
    together {
        class ContactDetails {
            name: String
            email: String
            phone: String
        }

        class LegalEntity {
            id: SensRNet.LegalEntityId
            website: URL
        }

        LegalEntity *- ContactDetails : contactPerson
        LegalEntity *- ContactDetails : publicContactDetails
    }

    enum Role {
        DEVICE_OWNER (device eigenaar)
        {abstract} TECHNICAL_STEWARD (technisch verantwoordelijke)
        {abstract} LEGAL_STEWARD (juridisch verantwoordelijke)
        {abstract} DATA_STEWARD (data verantwoordelijke)
    }

    class User {
        id: SensRNet.UserId
        socialId: String
        username: String
        email: String
        // rights connected to role
        userRole: UserRole
    }

    note left
        <size:10>LegalEntitys are the 'real'</size>
        <size:10>objects but will be</size>
        <size:10>represented by users. Users</size>
        <size:10>will connect with a social</size>
        <size:10>or business account</size>
        <size:10>(e.g. Office365, Google)</size>
    end note

    enum UserRole {
        USER
        ADMIN
    }

    LegalEntity o-- "*" User : users
    LegalEntity o- "*" Role : roles
    User - UserRole : role
}

package sensor <<Rectangle>> {

    class SensorAggregate #DDD {
        id: SensRNet.AggregateId
    }

    note bottom
        The collection of data which belong
        to one 'sensor installation' or device
        can be aggregated or collected as a 
        group. The 'aggregateId' is the identity
        of this group. This is especially applicable
        to event-sourced systems although the
        usage is general.
    end note

    together {

        class Device <<Thing>> {
            aggregateId: SensRNet.AggregateId
            id: SensRNet.DeviceId
            .. SensorDevicesAPI ..
            name: String
            description: String
            {abstract} properties: jsonObject
            .. SensRNet ..
            category: Category
            connectivity: String
            {abstract} networkOperator: String
            {abstract} powerSupply: String
        }

        note top of Device
          A 'Device' is referring to the sensor installation
          or thing which is conceivable in the physical
          world. Thing is the SensorDevicesAPI standard.
          In SensRNet this is called Device.
        end note

        class Sensor {
            aggregateId: SensRNet.AggregateId
            id: SensRNet.SensorId
            .. SensorDevicesAPI ..
            name: String
            description: String
            {abstract} metadata: any
            .. SensRNet ..
            type: SensorType
            manufacturer: String
            supplier: String
            documentation: URL
        }

    }

    class Datastream {
        aggregateId: SensRNet.AggregateId
        id: SensRNet.DatastreamId
        .. SensorDevicesAPI ..
        name: String
        description: String
        unitOfMeasurement: jsonObject
        observedArea: GML
        {abstract} observationType: ValueCode
        {abstract} phenomenonTime: period
        {abstract} resultTime: period
        .. SensRNet ..
        theme: List<Theme>
        dataQuality: String
        isActive: Boolean 
        isPublic: Boolean
        isOpenData: Boolean
        containsPIData: Boolean
        isReusable: Boolean
        documentation: URL
        dataLink: URL
        {abstract} dataClassification: String
    }

    class ObservationGoal {
        aggregateId: SensRNet.AggregateId
        id: SensRNet.ObservationGoalId
        .. SensRNet ..
        name: String
        description: String
        legalGround: String
        legalGroundLink: URL
    }

    class Location {
        aggregateId: SensRNet.AggregateId
        id: SensRNet.LocationId
        .. SensorDevicesAPI ..
        name: String
        description: String
        location: xyH-array
        .. SensRNet ..
        // reference to external Id
        // e.g. IMGEO+ objectId
        baseObjectId: String
    }

    enum Category {
        SENSOR
        CAMERA
        BEACON
    }

    enum Theme {
        Weather
        NatureAndEnvironment
        Waste
        Safety
        Mobility
        SoilAndUnderground
        Other
    }

    enum SensorType {
        .. beacon ..
        NavigationBeacon
        .. camera ..
        EnvironmentalZoneCameras
        SecurityCamera
        TraphicFlashlight
        .. sensor ..
        WeatherStation
        WindGauge
        WasteContainers
        FineDustSensor
        UVSensor
        LightCell
        MotionSensor
        FireDetector
        WaterLevelMeter
        MicrophoneOrSoundMeter
        PedometerCounters
        RadarDetector
        GMSSensor
        DetectionLoop
        HeightDetectionDevice
    }

    ' this is added compared to SensorDevicesAPI
    Device "1" *- "*" Sensor

    Device "1" o- "1" Category
    Device "1" *-- "1" Location
    Device "1" *-- "*" Datastream

    Sensor "1" *-- "*" Datastream : datastreams
    Sensor "1" o-- "1" SensorType

    Datastream "1" - "1" ObservationGoal
    Datastream "1" o-- "*" Theme
}

LegalEntity "1" o-- "*" Device : is <device-owner>
' LegalEntity "1" *-- "*" Sensor : has <a sensor-owner>
' LegalEntity "0" *-- "*" Sensor : has <a legal-steward>
' LegalEntity "0" *-- "*" Datastream : has <a data-steward>

note top of sensor
    <i>cursive</i> field are out of scope
    of the MVP product
end note

@enduml
