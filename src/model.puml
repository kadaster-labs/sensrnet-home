@startuml "SensRNet-UML-Model"

package LegalEntity <<Rectangle>> {
    together {
        class ContactDetails {
            name: String
            email: String
            phone: String
        }

        class LegalEntity {
            id: SensRNet.LegalEntityId
            website: URL
        }

        LegalEntity *- ContactDetails : contactPerson
        LegalEntity *- ContactDetails : publicContactDetails
    }

    enum Role {
        // device eigenaar
        DEVICE_OWNER
        // sensor eigenaar + SensRNet data verantwoordelijke
        SENSOR_OWNER
        // technisch verantwoordelijke
        TECHNICAL_STEWARD
        // juridisch verantwoordelijke
        LEGAL_STEWARD
        // data verantwoordelijke
        DATA_STEWARD
    }

    class User {
        id: SensRNet.UserId
        socialId: String
        username: String
        email: String
        // rights connected to role
        userRole: UserRole
    }

    note left
        <size:10>LegalEntitys are the 'real'</size>
        <size:10>objects but will be</size>
        <size:10>represented by users. Users</size>
        <size:10>will connect with a social</size>
        <size:10>or business account</size>
        <size:10>(e.g. Office365, Google)</size>
    end note

    enum UserRole {
        USER
        ADMIN
    }

    LegalEntity o-- "*" User : users
    LegalEntity o- "*" Role : roles
    User - UserRole : role
}

package sensor <<Rectangle>> {
    together {

        class Device {
            id: SensRNet.DeviceId
            description: String
            connectivity: String
            .. out of scope MVP ..
            networkOperator: String
            powerSupply: String
            properties: jsonObject
        }

        class Sensor {
            id: SensRNet.SensorId
            name: String
            description: String
            manufacturer: String
            supplier: String
            // whole sensor or per dataStream?
            isActive: Boolean 
            documentation: URL
            properties: jsonObject
        }

        class DataStream {
            id: SensRNet.DataStreamId
            name: String
            description: String
            theme: List<Theme>
            .. stream details ..
            unitOfMeasurement: String
            resultTime: String
            dataQuality: String
            isPublic: Boolean
            isOpenData: Boolean
            containsPIData: Boolean
            isReusable: Boolean
            documentation: URL
            dataLink: URL
            .. out of scope MVP ..
            dataClassification: String
        }

    }

    class Observation {
        id: SensRNet.ObservationId
        description: String
        observedProperty: String
        observedArea: GML
        legalGround: String
        .. out of scope MVP ..
        phenomenonTime: datetime
        result: any
        resultQuality: String
        parameters: jsonObject
    }

    class Location {
        description: String
        // xyz-array
        coordinates: Array
        // reference to external Id
        // e.g. IMGEO+ objectId
        baseObjectId: String
    }

    class HistoricalLocation extends Location {
        time: datetime
    }



    interface Type

    note left
        Category can be derived from
        specific type
    end note

    enum Category {
        SENSOR
        CAMERA
        BEACON
    }

    enum Theme {
        Weather
        NatureAndEnvironment
        Waste
        Safety
        Mobility
        SoilAndUnderground
        Other
    }

    enum TypeSensor extends Type {
        WeatherStation
        WindGauge
        WasteContainers
        FineDustSensor
        UVSensor
        LightCell
        MotionSensor
        FireDetector
        WaterLevelMeter
        MicrophoneOrSoundMeter
        PedometerCounters
        RadarDetector
        GMSSensor
        DetectionLoop
        HeightDetectionDevice
    }

    enum TypeCamera extends Type {
        EnvironmentalZoneCameras
        SecurityCamera
        TraphicFlashlight
    }

    enum TypeBeacon extends Type {
        NavigationBeacon
    }

    Device "1" *-- "1" Location : location
    Device "1" *- "*" Sensor : sensors
    Sensor "1" *- "*" DataStream : dataStreams
    DataStream -- Observation : observation

    Sensor "1" o-- "*" Theme
    Sensor "1" o-- "1" Type
}

LegalEntity "1" *-- "*" Device : has <a device-owner>
LegalEntity "1" *-- "*" Sensor : has <a sensor-owner>
LegalEntity "0" *-- "*" Sensor : has <a legal-steward>
LegalEntity "0" *-- "*" DataStream : has <a data-steward>

@enduml
