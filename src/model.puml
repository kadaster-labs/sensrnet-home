@startuml "SensRNet-UML-Model"

package organisation <<Rectangle>> {
    together {
        class ContactDetails {
            name: String
            email: String
            phone: String
        }

        class Organisation {
            id: SensRNet.OrganisationId
            website: URL
        }

        Organisation *- ContactDetails : contactPerson
        Organisation *- ContactDetails : publicContactDetails
    }

    enum Role {
        // device eigenaar
        DEVICE_OWNER,
        // sensor eigenaar + SensRNet data verantwoordelijke
        SENSOR_OWNER,
        // technisch verantwoordelijke
        TECHNICAL_STEWARD,
        // juridisch verantwoordelijke
        LEGAL_STEWARD,
        // data verantwoordelijke
        DATA_STEWARD
    }

    class User {
        id: SensRNet.UserId
        socialId: String
        username: String
        email: String
        // rights connected to role
        role: String
    }

    note right
        <size:10>Organisations are the 'real'</size>
        <size:10>objects but will be</size>
        <size:10>represented by users. Users</size>
        <size:10>will connect with a social</size>
        <size:10>or business account</size>
        <size:10>(e.g. Google, Azure, </size>
        <size:10>Facebook)</size>
    end note

    Organisation o-- "*" User : users
    Organisation o- "*" Role : roles
}

package sensor <<Rectangle>> {
    together {

        class Device {
            id: SensRNet.DeviceId
            description: String
        }

        class Sensor {
            id: SensRNet.SensorId
            name: String
            // de vergunning of verordening
            aim: String
            description: String
            manufacturer: String
            // whole sensor or per dataStream?
            active: Boolean 
            observationArea: GML
            // or only on dataStream?
            documentation: URL
            .. variants are in seperate lists/enums ..
            theme: List<Themes>
            type: Type
            // per type details
            typeDetails: jsonObject
        }

        class DataStream {
            id: SensRNet.DataStreamId
            name: String
            reason: String
            description: String
            // physicalElement
            observedProperty: String
            unitOfMeasurement: String
            isPublic: Boolean
            isOpenData: Boolean
            isReusable: Boolean
            documentation: URL
            dataLink: URL
            // in seconds
            dataFrequency: Int
            // 0.0 - 1.0
            dataQuality: Float
        }

    }

    interface Type

    note left
        Category can be derived from
        specific type
    end note

    enum Category {
        SENSOR,
        CAMERA,
        BEACON
    }

    enum Themes {
        Weather,
        NatureAndEnvironment,
        Waste,
        Safety,
        Mobility,
        SoilAndUnderground,
        Other
    }

    enum TypeSensor {
        WeatherStation,
        WindGauge,
        WasteContainers,
        FineDustSensor,
        UVSensor,
        LightCell,
        MotionSensor,
        FireDetector,
        WaterLevelMeter,
        MicrophoneOrSoundMeter,
        PedometerCounters,
        RadarDetector,
        GMSSensor,
        DetectionLoop,
        HeightDetectionDevice
    }

    enum TypeCamera {
        EnvironmentalZoneCameras,
        SecurityCamera,
        TraphicFlashlight,
    }

    enum TypeBeacon {
        NavigationBeacon
    }

    class Location {
        x: Float
        y: Float
        z: Float
        epsgCode: Int
        // reference to external Id
        // e.g. IMGEO+ objectId
        baseObjectId: String
    }

    Device "1" *-- "1" Location : location
    Device "1" *- "*" Sensor : sensors
    Sensor "1" *- "*" DataStream : dataStreams

    Sensor "1" o-- "*" Themes
    Sensor "1" o-- "1" Type
    Type <-- TypeSensor
    Type <-- TypeBeacon
    Type <-- TypeCamera
}

Organisation "1" *-- "*" Device : has <a device-owner>
Organisation "1" *-- "*" Sensor : has <a sensor-owner>
Organisation "0" *-- "*" Sensor : has <a legal-steward>
Organisation "0" *-- "*" DataStream : has <a data-steward>

@enduml
